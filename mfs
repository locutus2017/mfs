#!/bin/sh

# mfs (mate from scratch) system build
#
# Copyright 2016-2021 Rafael Tavares <mdrafaeltavares@gmail.com>
# All rights reserved
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:

MFSVERSION=0.2.9
MFSSOURCEDIR=./source
MFSCWD=$(pwd)
OUTPUT=/tmp
MFSEDITOR=gvim

set -e

cd $MFSSOURCEDIR

PKGREQ=$(echo $2 | cut -f1 -d'/')
PKGREQ2=$(echo $1 | cut -f1 -d'/')
FINDREQ=${FINDREQ:-$(find $OUTPUT -maxdepth 1 -name $PKGREQ-[0-9]*.txz)}
LOGREQ=${LOGREQ:-$(find /var/lib/pkgtools/packages -maxdepth 1 -name $PKGREQ-[0-9]* | cut -f1 -d" ")}

mfstalk() {
if [ -z "$1" ]; then
 echo -e " -| \033[1m$(basename $0)\033[0m:"
else
 echo -e " -| \033[1m$(basename $0)\033[0m: $1"
fi
}

edit() {
if [ -z "$PKGREQ" ]; then
 mfstalk "usage:"
 mfstalk " $(basename $0) edit 'ProgramName'"
 exit 1
else
 if [ -f "$PKGREQ/$PKGREQ.SlackBuild" ]; then
  cd "$PKGREQ"
  $MFSEDITOR "$PKGREQ".SlackBuild
  cd ..
 else
  mfstalk "'$PKGREQ' SlackBuild script not found!"
  exit 1
 fi
fi
}

build() {
if [ -z "$PKGREQ" ]; then
 mfstalk "usage:"
 mfstalk " $(basename $0) build 'ProgramName'"
 exit 1
else
 if [ -f "$PKGREQ/$PKGREQ.SlackBuild" ]; then
  cd "$PKGREQ"
  OUTPUT=$OUTPUT sh "$PKGREQ".SlackBuild || exit 1
  cd ..
 else
  mfstalk "'$PKGREQ' SlackBuild script not found!"
  exit 1
 fi
fi
}

installpkg() {
if [ -z "$PKGREQ" ]; then
 mfstalk "usage:"
 mfstalk " $(basename $0) install 'ProgramName'"
 exit 1
else
 if [ -z "$FINDREQ" ]; then
  mfstalk "$PKGREQ package not found!"
  exit 1
 else
  upgradepkg --install-new --reinstall "$FINDREQ"
  exit 0
 fi
fi
}

prepare() {
if [ -z "$PKGREQ" ]; then
 mfstalk "usage:"
 mfstalk " $(basename $0) prepare 'ProgramName'"
 exit 1
else
 edit || exit 1
 build || exit 1
 unset FINDREQ
 FINDREQ=${FINDREQ:-$(find $OUTPUT -maxdepth 1 -name $PKGREQ-[0-9]*.txz)}
 installpkg || exit 1
fi
}

catlog() {
if [ -z "$PKGREQ" ]; then
 mfstalk "usage:"
 mfstalk " $(basename $0) prepare 'ProgramName'"
 exit 1
else
 if [ -z "$LOGREQ" ]; then
  mfstalk "required log not found!"
  exit 1
 else
  cat "$LOGREQ" | less
 fi
fi
}

newtemplate() {
if [ -z "$PKGREQ" ]; then
 mfstalk "usage:"
 mfstalk " $(basename $0) new 'ProgramName'"
else
 if [ -d "$PKGREQ" ]; then
  mfstalk "this directory already exist!"
  exit 1
 else
  mkdir -p "$PKGREQ" || exit 1
  cp template.SlackBuild "$PKGREQ"/"$PKGREQ".SlackBuild || exit 1
  edit || exit 1
  build || exit 1
  unset FINDREQ
  FINDREQ=${FINDREQ:-$(find $OUTPUT -maxdepth 1 -name $PKGREQ-[0-9]*.txz)}
  installpkg || exit 1
 fi
fi
}

makemfspkg() {
cd $MFSCWD
mkdir -p pkg/opt/mfs
mv mfs README.md source pkg/opt/mfs/
cd pkg
mkdir -p usr/sbin
ln -s /opt/mfs/mfs usr/sbin/mfs
mkdir -p install
#            |-----handy-ruler------------------------------------------------------|
cat <<EOT >install/slack-desc
slackport-mfs:
slackport-mfs: MATE From Scratch (mfs) System Builder
slackport-mfs:
slackport-mfs: This package contains SlackBuild scripts needed to build the MATE
slackport-mfs: for Slackware. The mfs is an executable script responsible for build
slackport-mfs: and install the packages in pre-set order. In addition, mfs works as
slackport-mfs: a tool for editing, building and install pacakges in a more practical
slackport-mfs: and automated way.
slackport-mfs:
slackport-mfs: https://github.com/slackport/mfs
slackport-mfs:
EOT
makepkg -l y -c n $OUTPUT/slackport-mfs-$MFSVERSION-x86_64-1_mfs.txz
cd ..
rm -rf pkg/
}

mfsversion() {
mfstalk "$MFSVERSION"
}

mfshelp() {
cat <<EOT


         MATE From Scratch - version $MFSVERSION


  mfs autopkg		    - Create a txz package with mfs directory
			      and /usr/sbin/mfs symlink.
  mfs edit programname      - Edit respective SlackBuild file.
  mfs build programname     - Run the programname SlackBuild file.
  mfs cat programname       - See the log of installed package.
  mfs catlog programname    - Same as above.
  mfs help		    - Show this help mensage.
  mfs install programname   - Install the package on $OUTPUT directory.
  mfs new programname	    - Will create a directory and copy
			      template.SlackBuid into it with 'programname'
			      specified. So will edit, build and install this
			      'programname' sequentially..
  mfs prepare programname   - Will execute 'edit' 'build' and 'install' sequentially.
  mfs see programname       - Same as 'cat' command.
  mfs version               - Show mfs version.

EOT
}

case "$1" in
 "") continue ;;
 autopkg|-a) makemfspkg && exit 1 ;;
 edit|-e) edit && exit 1 ;;
 build|-b) build && exit 1 ;;
 cat|-c) catlog && exit 1 ;;
 catlog|-c) catlog && exit 1 ;;
 help|-h) mfshelp && exit 1 ;;
 install|-i) installpkg && exit 1 ;;
 new|-n) newtemplate && exit 1 ;;
 prepare|-p) prepare && exit 1 ;;
 see|-s) catlog && exit 1 ;;
 version|-v) mfsversion && exit 1 ;;
 *) PKGREQ=$PKGREQ2 && prepare && exit 1 ;;
esac

PKGBUILD=(
# Libraries and Desktop
zenity
rarian
lxml
yelp-xsl
yelp-tools
libunique
libunique3
pangox-compat
gtk-engines
murrine
lua
lua53
luajit
lgi
libpeas
libgksu
gksu
gssdp
gupnp
libgxps
gtksourceview4
mate-common
mate-desktop
libmatekbd
libmateweather
mate-icon-theme
caja
mate-polkit
marco
libmatemixer
mate-settings-daemon
mate-session-manager
mate-menus
mate-terminal
gtk-layer-shell
mate-panel
mate-backgrounds
mate-themes
mate-notification-daemon
eom
mate-control-center
mate-screensaver
engrampa
mate-media
mate-power-manager
mate-system-monitor
mate-calc
atril
caja-extensions
caja-dropbox
caja-actions
mate-applets
mate-sensors-applet
mate-utils
mozo
pluma
libwpe
wpebackend-fdo
libdaemon
python3-dbusmock
avahi
geoclue2
libseccomp
xdg-dbus-proxy
bubblewrap
webkit2gtk
yelp
mate-user-guide
setproctitle
python-distutils-extra
psutil
mate-tweak
mate-user-share
ido
libindicator
mate-indicator-applet
wheel
setuptools-scm
Unidecode
python-xlib
configobj
mate-menu
numix-icon-theme
numix-icon-theme-circle
python3-soupsieve
BeautifulSoup4
gst-plugins-bad
python2-scandir
pathlib2
wxPython4
wpebackend-fdo
p7zip
libhandy
seahorse
)

message() {
mfstalk "I need to add $subject $name."
mfstalk "Is that allright with you ?"
mfstalk "yes / no"
read reply
 case $reply in
  "yes") mfstalk "Adding $subject $name" ;;
  "no") mfstalk "Not adding $subject $name" && exit $? ;;
 esac
}

# This function is a collaboration of Martin S.I. Tijsma <sali@xs4all.nl>
# Thanks a lot!
checkusers() {

if
    ! grep -q "^avahi:" /etc/group
then
    subject=group
    name=Avahi
    message
    groupadd -g 214 avahi

fi

if
    ! grep -q "^avahi:" /etc/passwd
then
    subject=user
    name=Avahi
    message
    useradd -u 214 -g 214 -c "Avahi User" -d /dev/null -s /bin/false avahi
fi
}

checkusers

REBUILDFLATPAK=${REBUILDFLATPAK:-"no"}

for buildpkg in "${PKGBUILD[@]}"; do
 if [ -z "$(ls /var/log/packages | grep ^$buildpkg-[0-9] | grep _mfs)" ]; then
  mfstalk "Building $buildpkg..."
  sleep 1
  cd $buildpkg
  OUTPUT=$OUTPUT sh $buildpkg.SlackBuild
  mfstalk "$buildpkg builded! Installing..."
  sleep 1
  PKGINST=${BUILDPKG:-"$(ls $OUTPUT | grep ^$buildpkg-[0-9] | grep _mfs)"}
  upgradepkg --install-new --reinstall $OUTPUT/$PKGINST
  cd ..
 elif [ "$buildpkg" == "flatpak" ]; then
  if [ "$REBUILDFLATPAK" == "yes" ]; then
   if [ -z "$(ls /var/log/packages | grep ^malcontent-[0-9] | grep _mfs)" ]; then
    mfstalk "Building flatpak first time..."
    sleep 1
    cd flatpak
    OUTPUT=$OUTPUT sh flatpak.SlackBuild
    mfstalk "flatpak builded! Installing..."
    sleep 1
    PKGINST=${BUILDPKG:-"$(ls $OUTPUT | grep ^flatpak-[0-9] | grep _mfs)"}
    upgradepkg --install-new --reinstall $OUTPUT/$PKGINST
    rm $OUTPUT/$PKGINST
    cd ../malcontent
    mfstalk "Building malcontent..."
    sleep 1
    OUTPUT=$OUTPUT sh malcontent.SlackBuild
    unset PKGINST
    PKGINST=${BUILDPKG:-"$(ls $OUTPUT | grep ^malcontent-[0-9] | grep _mfs)"}
    upgradepkg --install-new --reinstall $OUTPUT/$PKGINST
    cd ../flatpak
    mfstalk "Building flatpak again..."
    sleep 1
    OUTPUT=$OUTPUT sh flatpak.SlackBuild
    mfstalk "flatpak builded again! Installing..."
    sleep 1
    unset PKGINST
    PKGINST=${BUILDPKG:-"$(ls $OUTPUT | grep ^flatpak-[0-9] | grep _mfs)"}
    upgradepkg --install-new --reinstall $OUTPUT/$PKGINST
    cd ..
   else
    mfstalk "malcontent already installed... rebuilding flatpak"
    sleep 1
    cd flatpak
    OUTPUT=$OUTPUT sh flatpak.SlackBuild
    mfstalk "flatpak builded again! Installing..."
    sleep 1
    unset PKGINST
    PKGINST=${BUILDPKG:-"$(ls $OUTPUT | grep ^flatpak-[0-9] | grep _mfs)"}
    upgradepkg --install-new --reinstall $OUTPUT/$PKGINST
    cd ..
   fi
  else
   if [ -z "$(ls /var/log/packages | grep ^malcontent-[0-9] | grep _mfs)" ]; then
    mfstalk "Building malcontent..."
    sleep 1
    cd malcontent
    OUTPUT=$OUTPUT sh malcontent.SlackBuild
    unset PKGINST
    PKGINST=${BUILDPKG:-"$(ls $OUTPUT | grep ^malcontent-[0-9] | grep _mfs)"}
    upgradepkg --install-new --reinstall $OUTPUT/$PKGINST
    cd ..
   else
     mfstalk "malcontent already installed!"
   fi
  fi
 else
  mfstalk "$buildpkg is already installed!"
 fi
done

mfstalk
mfstalk "All done!"
mfstalk "--------"



